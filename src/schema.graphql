type Query {
    info: String!
    getProperties: [Property]
    getOneProperty(id: ID!): Property
}

type Mutation {
    createUser(username: String!, password: String!, email: String!, usertype: String!, firstname: String!, lastname: String!): AuthPayload
    login(username: String!, password: String!): AuthPayload
    createProperty(address: String!, city: String!, state: String!, zip: String!): Property!
    editProperty(id: ID!, address: String, city: String, state: String, zip: String): Property!
    deleteProperty(id: ID!): Property!
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    username: String!
    email: String!
    usertype: String!
    firstname: String!
    lastname: String!
    properties: [Property]
}

type Property {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    address: String!
    city: String!
    state: String!
    zip: String!
    owner: User!
}

scalar DateTime